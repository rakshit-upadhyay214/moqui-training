<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

<!--    Create a new service to fetch records from the MoquiTraining entity.-->
    <service verb="find" noun="MoquiTraining">
<!--        Allow filtering by trainingName or trainingId.-->
        <in-parameters>
            <parameter name="trainingId" required="true"/>
        </in-parameters>
<!--        Return a list of records containing only trainingId, trainingName, and trainingDate.-->
        <out-parameters>
            <parameter name="trainingList"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="org.moqui.training.MoquiTraining" list="trainingList">
                <econdition field-name="trainingId" value="${trainingId}"/>
                <select-field field-name="trainingId, trainingName, trainingDate"/>
            </entity-find>
        </actions>
    </service>

    <service verb="store" noun="MoquiTraining">
        <in-parameters>
            <parameter name="trainingId" required="true"/>
            <parameter name="trainingName" required="true"/>
            <parameter name="trainingDate" required="true"/>
            <parameter name="trainingPrice" required="true"/>
            <parameter name="trainingDuration" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="trainingId" required="true"/>
            <parameter name="trainingName" required="true"/>
            <parameter name="trainingDate" />
            <parameter name="trainingPrice" />
            <parameter name="trainingDuration"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="org.moqui.training.MoquiTraining" value-field="existingRecord">
            </entity-find-one>
            <if condition="existingRecord">
                <then>
                    <set field="existingRecord.trainingDate" from="trainingDate"/>
                    <set field="existingRecord.trainingName" from="trainingName"/>
                    <set field="existingRecord.trainingPrice" from="trainingPrice"/>
                    <set field="existingRecord.trainingDuration" from="trainingDuration"/>
                    <entity-update value-field="existingRecord"/>
                </then>
            </if>
            <else>
                <service-call name="org.moqui.training.MoquiTraining.create#MoquiTraining" in-map="context" out-map="context"/>
            </else>
        </actions>
    </service>


    <service verb="patch" noun="Party">
        <in-parameters>
            <auto-parameters entity-name="Party">
                <exclude field-name="lastUpdatedStamp"/>
            </auto-parameters>
        </in-parameters>
        <out-parameters>
            <parameter name="partyId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="Party" value-field="existingRecord"/>
            <if condition="isEmpty(existingRecord)">
                <then>
                    <return message="PartyId doesn't Exist" type="warning"/>
                </then>
            </if>
            <set field="existingRecord.firstName" from="firstName"/>
            <set field="existingRecord.lastName" from="lastName"/>
            <entity-update value-field="existingRecord"/>
        </actions>
    </service>

    <service verb="delete" noun="Party">
        <in-parameters>
            <auto-parameters entity-name="Party" include="pk"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="Party" value-field="existingParty"/>
            <if condition="isEmpty(existingParty)">
                <then>
                    <return message="PartyId doesn't Exist" type="warning"/>
                </then>
            </if>

            <entity-find-one entity-name="OrderHeader" value-field="existingOrder">
                <field-map field-name="partyId" from="context.partyId"/>
            </entity-find-one>
            <log message="---------------existingOrder=${existingOrder}----------------"/>

            <entity-find entity-name="OrderItem" list="itemList">
                <econdition field-name="orderId" from="existingOrder.orderId"/>
            </entity-find>

            <log message="---------------itemList=${itemList}--------------"/>

            <iterate list="itemList" entry="item">
                <entity-delete value-field="item"/>
            </iterate>

            <log message="---------------itemList deleted--------------"/>



<!--            <if condition="!isEmpty(">-->
<!--                <then>-->
<!--                    <entity-delete-by-condition entity-name="OrderItem">-->
<!--                        <econdition field-name="orderId" from="existingOrderItem.orderId"/>-->
<!--                    </entity-delete-by-condition>-->
<!--                </then>-->
<!--            </if>-->

            <if condition="existingOrder">
                <then>
                    <entity-delete-by-condition entity-name="OrderHeader">
                        <econdition field-name="orderId" from="existingOrder.orderId"/>
                    </entity-delete-by-condition>
                    <log message="---------------OrderHeader deleted--------------"/>
                </then>
            </if>


<!--            <entity-find-one entity-name="OrderItem" value-field="existingOrderItem">-->
<!--                <field-map field-name="orderId" from="existingOrder.orderId"/>-->
<!--            </entity-find-one>-->

            <entity-find entity-name="ContactMech" list="contactList">
                <econdition field-name="partyId" from="existingParty.partyId"/>
            </entity-find>
            <log message="---------------existingContact=${contactList}--------------"/>

<!--            <entity-find-one entity-name="ContactMech" value-field="existingContact">-->
<!--                <field-map field-name="partyId" from="context.partId"/>-->
<!--            </entity-find-one>-->

            <if condition="contactList">
                <then>
                    <iterate list="contactList" entry="contact">
                        <entity-delete value-field="contact"/>
                    </iterate>
                    <log message="--------------Related Contacts also deleted--------------"/>
                </then>
            </if>

            <entity-delete value-field="existingParty"/>

        </actions>
    </service>



    <service verb="delete" noun="OrderHeader">
        <in-parameters>
            <parameter name="orderId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderId"/>
        </out-parameters>
        <actions>
            <service-call name="delete#OrderItem" in-map="context" out-map="resultMp"/>
        </actions>
    </service>


    <service verb="find" noun="OrderHeader">
        <in-parameters>
            <parameter name="orderId"/>
        </in-parameters>
        <out-parameters>
                <parameter name="order"/>
                <parameter name="itemList" type="List"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="OrderItem" list="itemList">
                <econdition field-name="orderId" from="context.orderId"/>
            </entity-find>
                <entity-find-one entity-name="OrderHeader" value-field="order"/>
        </actions>
    </service>


    <service verb="delete" noun="OrderItem">
        <in-parameters>
            <parameter name="orderId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderItemSeqId"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="OrderItem" list="itemList">
                <econdition field-name="orderId" from="context.orderId"/>
            </entity-find>
            <iterate list="itemList" entry="item">
                <entity-delete value-field="item"/>
            </iterate>
        </actions>
    </service>

    <service verb="patch" noun="OrderHeader">
        <in-parameters>
            <parameter name="orderId"/>
            <parameter name="partyId"/>
            <parameter name="shippingContactMechId"/>
            <parameter name="billingContactMechId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="OrderHeader" value-field="recordToUpdate"/>
            <log message="--------------OrderHeader record found is ${recordToUpdate}----------------"/>
            <entity-find-one entity-name="ContactMech" value-field="existingRecord1">
                <field-map field-name="contactMechId" from="context.shippingContactMechId"/>
            </entity-find-one>
            <entity-find-one entity-name="ContactMech" value-field="existingRecord2">
                <field-map field-name="contactMechId" from="context.billingContactMechId"/>
            </entity-find-one>
            <if condition="!(existingRecord1.partyId==existingRecord2.partyId)">
                <then>
                    <return message="ContactMechId doesn't exist for this partyId" type="warning"/>
                </then>
            </if>
            <set field="recordToUpdate.shippingContactMechId" from="context.shippingContactMechId"/>
            <set field="recordToUpdate.billingContactMechId" from="context.billingContactMechId"/>
            <entity-update value-field="recordToUpdate"/>
            <log message="--------------Updated OrderHeader record is ${recordToUpdate}----------------"/>
        </actions>
    </service>
    
    <service verb="create" noun="OrderHeader">
        <in-parameters>
            <parameter name="orderDate"/>
            <parameter name="partyId"/>
            <parameter name="shippingContactMechId"/>
            <parameter name="billingContactMechId"/>
            <parameter name="listOfItems" type="List">
                <parameter name="orderItem" type="Map">
                    <parameter name="productId"/>
                    <parameter name="quantity"/>
                    <parameter name="status"/>
                </parameter>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="finalMp"/>
        </out-parameters>
        <actions>
            <service-call name="create#OrderHeader" in-map="context" out-map="mp"/>
            <iterate list="listOfItems" entry="item">
                <set field="item.orderId" value="${mp.orderId}"/>
                <service-call name="create#OrderItem" in-map="item" out-map="finalMp"/>
            </iterate>
        </actions>
    </service>

    <service verb="create" noun="OrderItem" type="entity-auto">
        <in-parameters>
            <auto-parameters entity-name="OrderItem" include="nonpk">
                <exclude field-name="lastUpdatedStamp"/>
            </auto-parameters>
        </in-parameters>
        <out-parameters>
            <parameter name="orderItemSeqId"/>
            <parameter name="orderId"/>
        </out-parameters>
    </service>
</services>